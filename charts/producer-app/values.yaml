# Default values for producer-app.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# This will set the replicaset count more information can be found here: https://kubernetes.io/docs/concepts/workloads/controllers/replicaset/
replicaCount: 1

# This sets the container image more information can be found here: https://kubernetes.io/docs/concepts/containers/images/
image:
  repository: kafka-producer
  # This sets the pull policy for images.
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: "local"
# This is for the secrets for pulling an image from a private repository more information can be found here: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
imagePullSecrets: []

# This is to override the chart name.
nameOverride: ""
fullnameOverride: ""

# Secrets configuration for sensitive data
# When secrets.create is true, sensitive values will be stored in Kubernetes secrets
# and referenced via secretKeyRef in the deployment
secrets:
  # Specifies whether secrets should be created by this chart
  create: true

  # Configurable secret name - defaults to chart-created name but can be overridden
  # Empty = use default: {{ include "producer-app.fullname" . }}-secrets
  # For external secrets: specify the external secret name and set create: false
  secretName: ""

  # Key mappings (works for both chart-created and external secrets)
  keys:
    keycloakClientSecret: "keycloak-client-secret"
    vaultClientSecretKey: "vault-client-secret-key"
    edcApiAuthKey: "edc-api-auth-key"

  # Sensitive configuration values (will be base64 encoded in the secret)
  # Only used when create: true
  keycloakClientSecret: "mysecret"
  vaultClientSecretKey: "secretKey"
  edcApiAuthKey: "password"

# Environment variables for the producer-app application
env:
  # Kafka Configuration
  kafkaBootstrapServers: "{{ .Release.Name }}-kafka-controller-0-external:9095"
  kafkaProductionForecastTopic: "kafka-production-forecast-topic"
  kafkaProductionTrackingTopic: "kafka-production-tracking-topic"
  kafkaStreamTopic: "kafka-stream-topic"

  # Keycloak/OAuth Configuration
  keycloakClientId: "myclient"
  keycloakTokenUrl: "http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/token"
  keycloakRevokeUrl: "http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/revoke"

  # EDC Configuration
  assetId: "kafka-stream-asset"
  forecastAssetId: "kafka-forecast-asset"
  trackingAssetId: "kafka-tracking-asset"
  edcManagementUrl: "http://{{ .Release.Name }}-edc:8081/management"

# This section builds out the service account more information can be found here: https://kubernetes.io/docs/concepts/security/service-accounts/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  # Set to false for security hardening as producer-app doesn't need K8s API access
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# This is for setting Kubernetes Annotations to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}
# This is for setting Kubernetes Labels to a Pod.
# For more information checkout: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

podSecurityContext:
  fsGroup: 10100

securityContext:
  capabilities:
    drop:
      - ALL
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 10100
  runAsGroup: 10100
  allowPrivilegeEscalation: false

# This is for setting up a service more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/
# Note: producer-app doesn't expose HTTP endpoints, so service is optional
service:
  enabled: false
  # This sets the service type more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  type: ClusterIP
  # This sets the ports more information can be found here: https://kubernetes.io/docs/concepts/services-networking/service/#field-spec-ports
  port: 8080

# This block is for setting up the ingress for more information can be found here: https://kubernetes.io/docs/concepts/services-networking/ingress/
# Note: producer-app doesn't expose HTTP endpoints, so ingress is not needed
ingress:
  enabled: false

resources:
  limits:
    cpu: 150m
    memory: 512Mi
  requests:
    cpu: 50m
    memory: 256Mi

# Health checks are disabled since producer-app doesn't expose HTTP endpoints
# The application runs continuously and produces messages to Kafka
livenessProbe:
  enabled: false

readinessProbe:
  enabled: false

# This section is for setting up autoscaling more information can be found here: https://kubernetes.io/docs/concepts/workloads/autoscaling/
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 3
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

# Restart policy for the deployment
restartPolicy: Always

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true