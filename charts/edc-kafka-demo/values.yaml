#################################################################################
#  Copyright (c) 2025 Contributors to the Eclipse Foundation
#
#  See the NOTICE file(s) distributed with this work for additional
#  information regarding copyright ownership.
#
#  This program and the accompanying materials are made available under the
#  terms of the Apache License, Version 2.0 which is available at
#  https://www.apache.org/licenses/LICENSE-2.0.
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.
#
#  SPDX-License-Identifier: Apache-2.0
#################################################################################
global:
  security:
    # required to use bitnamilegacy images
    allowInsecureImages: true

customCaCerts:
  test.pem: &cert |
    -----BEGIN CERTIFICATE-----
    MIIDLjCCAhagAwIBAgIUZR4sZEpdrLHdS5yT/aPYGzJ6TtkwDQYJKoZIhvcNAQEL
    BQAwFDESMBAGA1UEAwwJa2Fma2EtZGV2MB4XDTI1MDkxOTA5MjQwM1oXDTM1MDkx
    NzA5MjQwM1owFDESMBAGA1UEAwwJa2Fma2EtZGV2MIIBIjANBgkqhkiG9w0BAQEF
    AAOCAQ8AMIIBCgKCAQEA53h9KxP27v8D3EQMSbQxvIT7t3bceJU7+BydiYhw2kcm
    KptunDzBtBjiEVvBN5yLh5US2R4Zt+sOX1oHc2GufLZIFhp3Xg0WvNQWCCUUkszm
    eoAw8BFvLe6VypTrAQN+wyjVuro472CFDEpVJKCS42HF5oM/xIDGR5EnaQn4i9jw
    s4Zu55jD1EjAxqZD8qOIWWRDEDMHeTChy8bCppLtQqQGmIaStBuFNHOhDNBpNoV+
    hs08IM62MhgzZzah4utpCHis8uLztEIGTAJY4qoeYCxHMs2SyWS+6XEn8CnKl4mj
    UFBr83eGEWUIp5gYwbaR7WJb7u5qJxAxhkR8/ZMzLQIDAQABo3gwdjAdBgNVHQ4E
    FgQUT0oo3n3qdmdrtAd81gE3gWgUd3YwHwYDVR0jBBgwFoAUT0oo3n3qdmdrtAd8
    1gE3gWgUd3YwDwYDVR0TAQH/BAUwAwEB/zAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0l
    BAwwCgYIKwYBBQUHAwEwDQYJKoZIhvcNAQELBQADggEBAHK17lXEN+pKNety/a72
    uUQ59pdsgxH/xU/aDBz8EzejJ2oOyFTRlcAMdbJ/bhpYUBWRYG7/oPtx7/kZAcyI
    OAFjbElTXDR6XGtn1b4eEXI0jQUPtMDRRT8L+ESuS5oNhoMeyOQ2hpT39wOI+vqM
    jdzpIdX2Voi3ZIQ9ryFHS8zMq0oZ5eaCkoCKL5wwA4Qg42qI3Hy0Hl9j3r6yyE49
    BguIxjh2Bfd3WAQBDobOl9zA1L0N0i5pBa87LFTkVEuOdAaWFDRnkd1lRIJzaP7+
    BRW7bkqKRMTLzrMGdByT7srDRanJ7PWUkhsy2NTxL4alqGuqdhvHifXZEYFejYV2
    BUE=
    -----END CERTIFICATE-----

kafka:
  enabled: true
  image:
    repository: bitnamilegacy/kafka

  # ─── Single‑pod KRaft cluster ────────────────────────────────────────────
  clusterId: "hNz3ciwPTzig3iL9jqyQ9w"
  kraftVersion: 1
  controller:
    replicaCount: 1
    persistence:
      enabled: false

  # ─── SSL Configuration ────────────────────────────────────────────────────
  tls:
    enabled: true
    type: PEM
    pemChainIncluded: true
    existingSecret: kafka-pem
    endpointIdentificationAlgorithm: ""
    sslClientAuth: "none"

  # ─── Listener matrix ─────────────────────────────────────────────────────
  listeners:
    client:
      protocol: PLAINTEXT
    interbroker:
      protocol: PLAINTEXT
    controller:
      protocol: PLAINTEXT
    external:
      protocol: SASL_SSL
      containerPort: 9095

  externalAccess:
    enabled: true
    controller:
      service:
        type: LoadBalancer
        ports:
          external: 9095
        loadBalancerNames:
          # cannot be templated so has to be adjusted manually when using a different release name and/or namespace
          - "demo-kafka.demo.svc.cluster.local"

  # ─── SASL / OAUTHBEARER ──────────────────────────────────────────────────
  sasl:
    enabledMechanisms: OAUTHBEARER,PLAIN
    interBrokerMechanism: PLAIN
    controllerMechanism: PLAIN
    oauthbearer:
      jwksEndpointUrl: "http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/certs"
      tokenEndpointUrl: "http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/token"
      expectedAudience: "account"

  # ─── Extra broker properties ─────────────────────────────────────────────
  overrideConfiguration:
    # broker‑side validator for JWTs
    listener.name.external.oauthbearer.sasl.server.callback.handler.class: |
      org.apache.kafka.common.security.oauthbearer.OAuthBearerValidatorCallbackHandler
    # single‑node replication tweaks
    offsets.topic.replication.factor: "1"
    transaction.state.log.replication.factor: "1"
    transaction.state.log.min.isr: "1"
    authorizer.class.name: "org.apache.kafka.metadata.authorizer.StandardAuthorizer"
    allow.everyone.if.no.acl.found: "true"

  extraEnvVars:
    - name: KAFKA_OPTS
      value: |
        -Dorg.apache.kafka.sasl.oauthbearer.allowed.urls=http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/certs,http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/token

keycloak:
  image:
    repository: bitnamilegacy/keycloak
  enabled: true
  auth:
    adminUser: admin
    adminPassword: admin
  extraEnvVars:
    - name: KEYCLOAK_EXTRA_ARGS
      value: "--import-realm"
  extraVolumes:
    - name: realm
      configMap:
        name: "{{ .Release.Name }}-keycloak-realm-config"
  extraVolumeMounts:
    - name: realm
      mountPath: /opt/bitnami/keycloak/data/import
      readOnly: true
  postgresql:
    image:
      repository: bitnamilegacy/postgresql
    auth:
      postgresPassword: "test"
      username: bn_keycloak
      password: "test"
      database: bitnami_keycloak
    primary:
      persistence:
        enabled: false
  livenessProbe:
    initialDelaySeconds: 60
    periodSeconds: 1
    timeoutSeconds: 5
    failureThreshold: 20
  readinessProbe:
    initialDelaySeconds: 30
    periodSeconds: 5
    timeoutSeconds: 1
    failureThreshold: 10

consumer-app:
  enabled: true
  service:
    enabled: true
    port: 8080
  customCACerts:
    enabled: true
    secretName: kafka-pem
  secrets:
    edcApiKey: "password"
  application:
    # EDC Configuration
    edc:
      managementUrl: "http://{{ .Release.Name }}-consumer-edc-controlplane:8081/management"
      assets:
        stream: "kafka-stream-asset"
        forecast: "kafka-forecast-asset"
        tracking: "kafka-tracking-asset"

    # Provider Configuration
    provider:
      id: "BPNL000000000B02"
      protocolUrl: "http://{{ .Release.Name }}-producer-edc-controlplane:8084/api/v1/dsp"

producer-app:
  enabled: true
  customCACerts:
    enabled: true
    secretName: kafka-pem
  application:
    kafka:
      bootstrapServers: "{{ .Release.Name }}-kafka-controller-0-external:9095"
      securityProtocol: "SASL_SSL"
      topics:
        productionForecast: "kafka-production-forecast-topic"
        productionTracking: "kafka-production-tracking-topic"
        stream: "kafka-stream-topic"
      ssl:
        truststoreLocation: "/opt/java/openjdk/lib/security/cacerts"
        truststorePassword: "changeit"
        endpointIdentificationAlgorithm: ""

    authentication:
      oauth2:
        clientId: "myclient"
        tokenUrl: "http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/token"
        revokeUrl: "http://{{ .Release.Name }}-keycloak:80/realms/kafka/protocol/openid-connect/revoke"

    edc:
      managementUrl: "http://{{ .Release.Name }}-producer-edc-controlplane:8081/management"
      assets:
        stream: "kafka-stream-asset"
        forecast: "kafka-forecast-asset"
        tracking: "kafka-tracking-asset"

  secrets:
    oauth2ClientSecret: "mysecret"
    clientSecretVaultKey: "secretKey"
    edcApiAuthKey: "password"

producer-edc:
  enabled: true
  tractusx-connector:
    install:
      vault: true
    nameOverride: producer-edc
    postgresql:
      nameOverride: producer-edc-posgresql
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-producer-edc-posgresql:5432/edc"
    participant:
      id: "BPNL000000000B02"
    iatp:
      id: "did:web:changeme"
      trustedIssuers: []
      sts:
        dim:
          url: http://test.local
        oauth:
          token_url: http://test.local
          client:
            id: clientId
            secret_alias: clientSecretAlias
    controlplane:
      image:
        # override the edc docker image with the kafka extension image
        repository: "edc-controlplane-kafka-local"
        pullPolicy: IfNotPresent
        tag: "latest"
      endpoints:
        management:
          authKey: "password"
      # Add SSL configuration
      env:
        EDC_KAFKA_SSL_TRUSTSTORE_LOCATION: "/opt/java/openjdk/lib/security/cacerts"
        EDC_KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
        EDC_KAFKA_BOOTSTRAP_SERVERS: "demo-kafka-controller-0-external:9095"
        EDC_KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
        EDC_KAFKA_SASL_MECHANISM: "OAUTHBEARER"
        EDC_KAFKA_ADMIN_TOKEN_URL: "http://demo-keycloak:80/realms/kafka/protocol/openid-connect/token"
        EDC_KAFKA_ADMIN_CLIENT_ID: "myclient"
        EDC_KAFKA_ADMIN_CLIENT_SECRET_KEY: "adminKey"
        EDC_KAFKA_ACL_ENABLED: "false"
      bdrs:
        server:
          url: http://test.local
    dataplane:
      image:
        # override the edc docker image with the kafka extension image
        repository: "edc-dataplane-kafka-local"
        pullPolicy: IfNotPresent
        tag: "latest"
      token:
        signer:
          privatekey_alias: tokenSignerPrivateKey
        verifier:
          publickey_alias: tokenSignerPublicKey
    customCaCerts:
      test.pem: *cert

consumer-edc:
  enabled: true
  tractusx-connector:
    install:
      vault: false
    nameOverride: consumer-edc
    postgresql:
      nameOverride: consumer-edc-posgresql
      jdbcUrl: "jdbc:postgresql://{{ .Release.Name }}-consumer-edc-posgresql:5432/edc"
    participant:
      id: "BPNL000000000A01"
    iatp:
      id: "did:web:changeme"
      trustedIssuers: []
      sts:
        dim:
          url: http://test.local
        oauth:
          token_url: http://test.local
          client:
            id: clientId
            secret_alias: clientSecretAlias
    controlplane:
      image:
        # override the edc docker image with the kafka extension image
        repository: "edc-controlplane-kafka-local"
        pullPolicy: IfNotPresent
        tag: "latest"
      endpoints:
        management:
          authKey: "password"
      # Add SSL configuration
      env:
        EDC_KAFKA_SSL_TRUSTSTORE_LOCATION: "/opt/java/openjdk/lib/security/cacerts"
        EDC_KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: ""
        EDC_KAFKA_BOOTSTRAP_SERVERS: "demo-kafka.demo.svc.cluster.local:9095"
        EDC_KAFKA_SECURITY_PROTOCOL: "SASL_SSL"
        EDC_KAFKA_SASL_MECHANISM: "OAUTHBEARER"
        EDC_KAFKA_ADMIN_TOKEN_URL: "http://kafka-keycloak:80/realms/kafka/protocol/openid-connect/token"
        EDC_KAFKA_ADMIN_CLIENT_ID: "myclient"
        EDC_KAFKA_ADMIN_CLIENT_SECRET_KEY: "adminKey"
      bdrs:
        server:
          url: http://test.local
    dataplane:
      image:
        # override the edc docker image with the kafka extension image
        repository: "edc-dataplane-kafka-local"
        pullPolicy: IfNotPresent
        tag: "latest"
      token:
        signer:
          privatekey_alias: tokenSignerPrivateKey
        verifier:
          publickey_alias: tokenSignerPublicKey
    customCaCerts:
      test.pem: *cert
