[metadata]
format.version = "1.1"

[versions]
tractusx = "0.9.0"
edc = "0.10.1"
junit = "5.11.3"
assertj = "3.26.3"
mockito = "5.18.0"
awaitility = "4.2.0"
testcontainers = "1.21.3"
failsafe = "3.3.2"
shadow = "8.3.8"
kafka = "3.7.0"
jackson = "2.17.1"
lombok = "1.18.38"
slf4j = "1.7.36"
logback = "1.5.18"
java-jwt = "4.5.0"
spring-boot = "3.2.0"
spring-dependency-management = "1.1.4"
opentelemetry = "2.20.0"
docker = "9.4.0"

[libraries]
# Tractus-X EDC - Runtimes
tx-edc-controlplane-base = { module = "org.eclipse.tractusx.edc:edc-controlplane-base", version.ref = "tractusx" }
tx-edc-runtime-memory = { module = "org.eclipse.tractusx.edc:edc-runtime-memory", version.ref = "tractusx" }
tx-edc-dataplane-base = { module = "org.eclipse.tractusx.edc:edc-dataplane-base", version.ref = "tractusx" }
tx-edc-controlplane-postgresql-hashicorp = { module = "org.eclipse.tractusx.edc:edc-controlplane-postgresql-hashicorp-vault", version.ref = "tractusx" }
tx-edc-dataplane-hashicorp = { module = "org.eclipse.tractusx.edc:edc-dataplane-hashicorp-vault", version.ref = "tractusx" }

# Tractus-X EDC - Misc
tx-edc-spi-bdrs-client = { module = "org.eclipse.tractusx.edc:bdrs-client-spi", version.ref = "tractusx" }
tx-edc-core-utils = { module = "org.eclipse.tractusx.edc:core-utils", version.ref = "tractusx" }

# Upstream EDC - SPI
edc-spi-asset = { module = "org.eclipse.edc:asset-spi", version.ref = "edc" }
edc-spi-catalog = { module = "org.eclipse.edc:catalog-spi", version.ref = "edc" }
edc-spi-contract = { module = "org.eclipse.edc:contract-spi", version.ref = "edc" }
edc-spi-core = { module = "org.eclipse.edc:core-spi", version.ref = "edc" }
edc-spi-http = { module = "org.eclipse.edc:http-spi", version.ref = "edc" }
edc-spi-identity-did = { module = "org.eclipse.edc:identity-did-spi", version.ref = "edc" }
edc-spi-identity-trust = { module = "org.eclipse.edc:identity-trust-spi", version.ref = "edc" }
edc-spi-keys = { module = "org.eclipse.edc:keys-spi", version.ref = "edc" }
edc-spi-validator = { module = "org.eclipse.edc:validator-spi", version.ref = "edc" }
edc-spi-token = { module = "org.eclipse.edc:token-spi", version.ref = "edc" }
edc-spi-transfer = { module = "org.eclipse.edc:transfer-spi", version.ref = "edc" }
edc-spi-dataplane = { module = "org.eclipse.edc:data-plane-spi", version.ref = "edc" }
edc-control-plane-transfer = { module = "org.eclipse.edc:control-plane-transfer", version.ref = "edc" }

# Upstream EDC - Core
edc-core-connector = { module = "org.eclipse.edc:connector-core", version.ref = "edc" }
edc-core-controlplane = { module = "org.eclipse.edc:control-plane-core", version.ref = "edc" }

# Upstream EDC - AWS
edc-aws-s3-core = { module = "org.eclipse.edc.aws:aws-s3-core", version.ref = "edc" }
edc-aws-s3-test = { module = "org.eclipse.edc.aws:aws-s3-test", version.ref = "edc" }

# Upstream EDC - Misc
edc-util-dataplane = { module = "org.eclipse.edc:data-plane-util", version.ref = "edc" }
edc-lib-keys = { module = "org.eclipse.edc:keys-lib", version.ref = "edc" }
edc-lib-query = { module = "org.eclipse.edc:query-lib", version.ref = "edc" }
edc-lib-util = { module = "org.eclipse.edc:util-lib", version.ref = "edc" }
edc-transaction-local = { module = "org.eclipse.edc:transaction-local", version.ref = "edc" }
edc-iam-mock = { module = "org.eclipse.edc:iam-mock", version.ref = "edc" }
edc-junit = { module = "org.eclipse.edc:junit", version.ref = "edc" }
edc-auth-oauth2-client = { module = "org.eclipse.edc:oauth2-client", version.ref = "edc" }
edc-data-plane-http-oauth2 = { module = "org.eclipse.edc:data-plane-http-oauth2", version.ref = "edc" }
edc-vault-hashicorp = { module = "org.eclipse.edc:vault-hashicorp", version.ref = "edc" }
edc-junit-base = { module = "org.eclipse.edc:junit-base", version.ref = "edc" }
edc-transfer-data-plane-signaling = { module = "org.eclipse.edc:transfer-data-plane-signaling", version.ref = "edc" }
edc-validator-lib = { module = "org.eclipse.edc:validator-lib", version.ref = "edc" }

# Testing
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
junit-jupiter = { module = "org.junit.jupiter:junit-jupiter", version.ref = "junit" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
junit-jupiter-engine = { module = "org.junit.jupiter:junit-jupiter-engine", version.ref = "junit" }
junit-jupiter-params = { module = "org.junit.jupiter:junit-jupiter-params", version.ref = "junit" }
mockito-core = { module = "org.mockito:mockito-core", version.ref = "mockito" }
mockito-junit-jupiter = { module = "org.mockito:mockito-junit-jupiter", version.ref = "mockito" }
awaitility = { module = "org.awaitility:awaitility", version.ref = "awaitility" }
testcontainers = { module = "org.testcontainers:testcontainers", version.ref = "testcontainers" }
testcontainers-junit = { module = "org.testcontainers:junit-jupiter", version.ref = "testcontainers" }
testcontainers-kafka = { module = "org.testcontainers:kafka", version.ref = "testcontainers" }
testcontainers-vault = { module = "org.testcontainers:vault", version.ref = "testcontainers" }

# Other
failsafe = { module = "dev.failsafe:failsafe", version.ref = "failsafe" }
kafka-clients = { module = "org.apache.kafka:kafka-clients", version.ref = "kafka" }
jackson-databind = { module = "com.fasterxml.jackson.core:jackson-databind", version.ref = "jackson" }
jackson-datatype-jsr310 = { module = "com.fasterxml.jackson.datatype:jackson-datatype-jsr310", version.ref = "jackson" }
lombok = {module = "org.projectlombok:lombok", version.ref = "lombok"}
slf4j-api = {module = "org.slf4j:slf4j-api", version.ref = "slf4j"}
logback-classic = {module = "ch.qos.logback:logback-classic", version.ref = "logback"}
java-jwt = {module = "com.auth0:java-jwt", version.ref = "java-jwt"}
opentelemetry-javaagent = { module = "io.opentelemetry.javaagent:opentelemetry-javaagent", version.ref = "opentelemetry" }

# Spring Boot
spring-boot-starter-web = {module = "org.springframework.boot:spring-boot-starter-web", version.ref = "spring-boot"}
spring-boot-starter-actuator = {module = "org.springframework.boot:spring-boot-starter-actuator", version.ref = "spring-boot"}
spring-boot-starter-validation = {module = "org.springframework.boot:spring-boot-starter-validation", version.ref = "spring-boot"}

[plugins]
shadow = { id = "com.gradleup.shadow", version.ref = "shadow" }
spring-boot = { id = "org.springframework.boot", version.ref = "spring-boot" }
spring-dependency-management = { id = "io.spring.dependency-management", version.ref = "spring-dependency-management" }
docker = { id = "com.bmuschko.docker-remote-api", version.ref = "docker" }
